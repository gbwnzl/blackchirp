#Enable CUDA GPU support
#CONFIG += gpu-cuda

#Enable LIF controls/acquisition
#CONFIG += lif

#-----------------------------------------
# Library configuration
#
# You may need to specify custom paths etc
# for your OS. See qmake documentation for
# examples
#-----------------------------------------

unix:!macx: LIBS += -lqwt -lgsl -lm -lgslcblas


#------------------------------------------------
# The following defines select hardware implementations.
#
# The FTMW Oscilloscope and Clocks are required.
# All others are optional and may be commented out.
# The keys are case insensitive, and may be found at
# https://blackchirp.readthedocs.io/en/latest/user_guide/hardware_details.html
# -----------------------------------------------

# FTMW Oscilloscope
# options: virtual, DSA71604C, MSO72004C, M4i2220x8, DSOx92004A, MSO64B
FTMWSCOPE=virtual

# Clocks. Include in a space-delimited list; as many as needed
# For example:
# CLOCKS=fixed fixed valon5009
# options: fixed, Valon5009, Valon5015, HP83712B
CLOCKS=fixed fixed

# AWG
# options: virtual, 1 = AWG70002A, 2 = AWG7122B, 3 = AD9914, 4 = M8195A, 5 = AWG5000)
#AWG=virtual

# Pulse generator (<0 = None, 0 = virtual, 1 = Quantum Composers 9528+, 2 = Quantum Composers 9518, 3 = Quantum Composers 9214)
# options: virtual, qc9518, qc9528, qc9214
#PGEN=virtual

# Flow Controller
# options: virtual, MKS647C, MKS946
#FC=virtual

# IO Board
# options: virtual, LabjackU3
#IOBOARD=virtual

# GPIB controller
# options: virtual, PrologixLAN, ProligixUSB
#GPIB=virtual

# Pressure controller
# options virtual, Intellisys
#PC=virtual

# Temperature controller
# options: virtual, Lakeshore218
#TC=virtual

###### LIF ONLY #####
# LIF Oscilloscope
# options: virtual, M4i2211x8
#LIFSCOPE=virtual

# LIF Laser
# options: virtual, Opolette
#LIFLASER=virtual

##### END LIF ONLY #####

#------------------------------------------------
# Space for custom include/lib paths
#------------------------------------------------

equals(IOBOARD,1)|allhardware {
    LIBS += -llabjackusb
}

equals(FTMWSCOPE,3)|equals(LIFSCOPE,1)|allhardware {
     LIBS += -lspcm_linux
}


#------------------------------
# CUDA compiler configuration
#------------------------------
gpu-cuda {
    DEFINES += BC_CUDA

    # Cuda sources
	CUDA_SOURCES += $$PWD/../modules/cuda/gpuaverager.cu

    # Path to cuda toolkit install
	CUDA_DIR      = /usr/local/cuda
	INCLUDEPATH  += $$CUDA_DIR/include -isystem /usr/include/qt5 -isystem /usr/include/qt5/QtCore
	QMAKE_LIBDIR += $$CUDA_DIR/lib64
	CUDA_INC = $$join(INCLUDEPATH,' -I','-I',' ')
	CUDA_INT
	LIBS += -L$$CUDA_DIR/lib64 -lcuda -lcudart
	# GPU architecture
	CUDA_ARCH     = sm_50
	NVCCFLAGS     = --compiler-options -use_fast_math --ptxas-options=-v -Xcompiler -fPIC -Xcompiler -Wno-attributes

    CONFIG(debug, debug|release) {
	    cuda_d.commands = $$CUDA_DIR/bin/nvcc -D_DEBUG -std=c++11 -m64 -O3 -arch=$$CUDA_ARCH -c $$NVCCFLAGS \
		               $$CUDA_INC ${QMAKE_FILE_NAME} -o ${QMAKE_FILE_OUT} \
					   2>&1 | sed -r \"s/\\(([0-9]+)\\)/:\\1/g\" 1>&2

        cuda_d.input = CUDA_SOURCES
		cuda_d.output = ${OBJECTS_DIR}${QMAKE_FILE_BASE}_cuda.o
		QMAKE_EXTRA_COMPILERS += cuda_d
	}
	else {
	    cuda.commands = $$CUDA_DIR/bin/nvcc -std=c++11 -m64 -O3 -arch=$$CUDA_ARCH -c $$NVCCFLAGS \
		             $$CUDA_INC $$LIBS ${QMAKE_FILE_NAME} -o ${QMAKE_FILE_OUT} \
					 2>&1 | sed -r \"s/\\(([0-9]+)\\)/:\\1/g\" 1>&2

        cuda.input = CUDA_SOURCES
		cuda.output = ${OBJECTS_DIR}${QMAKE_FILE_BASE}_cuda.o
		QMAKE_EXTRA_COMPILERS += cuda
	}
}
